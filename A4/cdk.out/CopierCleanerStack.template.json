{
 "Resources": {
  "SourceBucketDDD2130A": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/SourceBucket/Resource"
   }
  },
  "SourceBucketNotifications0A6F2084": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "SourceBucketDDD2130A"
    },
    "NotificationConfiguration": {
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "TopicArn": {
        "Ref": "S3EventTopic5FF7B50F"
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "S3EventTopicPolicyEC20EE32",
    "S3EventTopic5FF7B50F"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/SourceBucket/Notifications/Resource"
   }
  },
  "DestinationBucket4BECDB47": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/DestinationBucket/Resource"
   }
  },
  "S3EventTopic5FF7B50F": {
   "Type": "AWS::SNS::Topic",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/S3EventTopic/Resource"
   }
  },
  "S3EventTopicPolicyEC20EE32": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "SourceBucketDDD2130A",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "S3EventTopic5FF7B50F"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "S3EventTopic5FF7B50F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/S3EventTopic/Policy/Resource"
   }
  },
  "AlarmTopicD01E77F9": {
   "Type": "AWS::SNS::Topic",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/AlarmTopic/Resource"
   }
  },
  "AlarmTopicPolicy309DB5F8": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudwatch.amazonaws.com"
       },
       "Resource": {
        "Ref": "AlarmTopicD01E77F9"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "AlarmTopicD01E77F9"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/AlarmTopic/Policy/Resource"
   }
  },
  "CopierEventQueueD739F7D2": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "VisibilityTimeout": 60
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierEventQueue/Resource"
   }
  },
  "CopierEventQueuePolicy74063911": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "S3EventTopic5FF7B50F"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "CopierEventQueueD739F7D2",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "CopierEventQueueD739F7D2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierEventQueue/Policy/Resource"
   }
  },
  "CopierEventQueueCopierCleanerStackS3EventTopic850DD56E23229925": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "CopierEventQueueD739F7D2",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "S3EventTopic5FF7B50F"
    }
   },
   "DependsOn": [
    "CopierEventQueuePolicy74063911"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierEventQueue/CopierCleanerStackS3EventTopic850DD56E/Resource"
   }
  },
  "LoggerEventQueueAA8ABDD7": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "VisibilityTimeout": 60
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerEventQueue/Resource"
   }
  },
  "LoggerEventQueuePolicyC697CD7A": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "S3EventTopic5FF7B50F"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "LoggerEventQueueAA8ABDD7",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "LoggerEventQueueAA8ABDD7"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerEventQueue/Policy/Resource"
   }
  },
  "LoggerEventQueueCopierCleanerStackS3EventTopic850DD56EF46DB657": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "LoggerEventQueueAA8ABDD7",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "S3EventTopic5FF7B50F"
    }
   },
   "DependsOn": [
    "LoggerEventQueuePolicyC697CD7A"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerEventQueue/CopierCleanerStackS3EventTopic850DD56E/Resource"
   }
  },
  "CleanerEventQueueE520A60A": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "VisibilityTimeout": 300
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerEventQueue/Resource"
   }
  },
  "CleanerEventQueuePolicy22FE879E": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "AlarmTopicD01E77F9"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "CleanerEventQueueE520A60A",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "CleanerEventQueueE520A60A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerEventQueue/Policy/Resource"
   }
  },
  "CleanerEventQueueCopierCleanerStackAlarmTopicB164A25DA59C3113": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "CleanerEventQueueE520A60A",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "AlarmTopicD01E77F9"
    }
   },
   "DependsOn": [
    "CleanerEventQueuePolicy22FE879E"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerEventQueue/CopierCleanerStackAlarmTopicB164A25D/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    strToHash=json.dumps(n, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CopierLambdaServiceRoleD2D0B2A1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierLambda/ServiceRole/Resource"
   }
  },
  "CopierLambdaServiceRoleDefaultPolicy58FCDC2A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CopierEventQueueD739F7D2",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SourceBucketDDD2130A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SourceBucketDDD2130A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DestinationBucket4BECDB47",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DestinationBucket4BECDB47",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CopierLambdaServiceRoleDefaultPolicy58FCDC2A",
    "Roles": [
     {
      "Ref": "CopierLambdaServiceRoleD2D0B2A1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CopierLambda423421F6": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "74cf9fe7960b6da5308fcb43d86647d5b483cae5f67ec8b2697f4f82e9468f84.zip"
    },
    "Environment": {
     "Variables": {
      "DESTINATION_BUCKET": {
       "Ref": "DestinationBucket4BECDB47"
      }
     }
    },
    "Handler": "copier.handler",
    "Role": {
     "Fn::GetAtt": [
      "CopierLambdaServiceRoleD2D0B2A1",
      "Arn"
     ]
    },
    "Runtime": "python3.12"
   },
   "DependsOn": [
    "CopierLambdaServiceRoleDefaultPolicy58FCDC2A",
    "CopierLambdaServiceRoleD2D0B2A1"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierLambda/Resource",
    "aws:asset:path": "asset.74cf9fe7960b6da5308fcb43d86647d5b483cae5f67ec8b2697f4f82e9468f84",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "CopierLambdaSqsEventSourceCopierCleanerStackCopierEventQueue3F4B1ED5EEB6A191": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "EventSourceArn": {
     "Fn::GetAtt": [
      "CopierEventQueueD739F7D2",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "CopierLambda423421F6"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CopierLambda/SqsEventSource:CopierCleanerStackCopierEventQueue3F4B1ED5/Resource"
   }
  },
  "LoggerLambdaServiceRole902E33C1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerLambda/ServiceRole/Resource"
   }
  },
  "LoggerLambdaServiceRoleDefaultPolicyC364621A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LoggerEventQueueAA8ABDD7",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DestinationBucket4BECDB47",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DestinationBucket4BECDB47",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SourceBucketDDD2130A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SourceBucketDDD2130A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DestinationBucket4BECDB47",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DestinationBucket4BECDB47",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LoggerLambdaServiceRoleDefaultPolicyC364621A",
    "Roles": [
     {
      "Ref": "LoggerLambdaServiceRole902E33C1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LoggerLambda1366804F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "74cf9fe7960b6da5308fcb43d86647d5b483cae5f67ec8b2697f4f82e9468f84.zip"
    },
    "Environment": {
     "Variables": {
      "DESTINATION_BUCKET": {
       "Ref": "DestinationBucket4BECDB47"
      }
     }
    },
    "Handler": "logger.handler",
    "Role": {
     "Fn::GetAtt": [
      "LoggerLambdaServiceRole902E33C1",
      "Arn"
     ]
    },
    "Runtime": "python3.12"
   },
   "DependsOn": [
    "LoggerLambdaServiceRoleDefaultPolicyC364621A",
    "LoggerLambdaServiceRole902E33C1"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerLambda/Resource",
    "aws:asset:path": "asset.74cf9fe7960b6da5308fcb43d86647d5b483cae5f67ec8b2697f4f82e9468f84",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LoggerLambdaSqsEventSourceCopierCleanerStackLoggerEventQueue3A6FA65816A773EF": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "EventSourceArn": {
     "Fn::GetAtt": [
      "LoggerEventQueueAA8ABDD7",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "LoggerLambda1366804F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/LoggerLambda/SqsEventSource:CopierCleanerStackLoggerEventQueue3A6FA658/Resource"
   }
  },
  "TemporaryFilesSizeAlarm0E10651D": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmActions": [
     {
      "Ref": "AlarmTopicD01E77F9"
     }
    ],
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "DatapointsToAlarm": 1,
    "Dimensions": [
     {
      "Name": "BucketName",
      "Value": {
       "Ref": "DestinationBucket4BECDB47"
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "TotalTemporaryFileSize",
    "Namespace": "CopierCleaner",
    "Period": 30,
    "Statistic": "Average",
    "Threshold": 3072
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/TemporaryFilesSizeAlarm/Resource"
   }
  },
  "CleanerLambdaServiceRole9F5C3FC0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerLambda/ServiceRole/Resource"
   }
  },
  "CleanerLambdaServiceRoleDefaultPolicy04CE099E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CleanerEventQueueE520A60A",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DestinationBucket4BECDB47",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DestinationBucket4BECDB47",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:DeleteObject*",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "DestinationBucket4BECDB47",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CleanerLambdaServiceRoleDefaultPolicy04CE099E",
    "Roles": [
     {
      "Ref": "CleanerLambdaServiceRole9F5C3FC0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CleanerLambdaADF65AF3": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "74cf9fe7960b6da5308fcb43d86647d5b483cae5f67ec8b2697f4f82e9468f84.zip"
    },
    "Environment": {
     "Variables": {
      "DESTINATION_BUCKET": {
       "Ref": "DestinationBucket4BECDB47"
      }
     }
    },
    "Handler": "cleaner.handler",
    "Role": {
     "Fn::GetAtt": [
      "CleanerLambdaServiceRole9F5C3FC0",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 40
   },
   "DependsOn": [
    "CleanerLambdaServiceRoleDefaultPolicy04CE099E",
    "CleanerLambdaServiceRole9F5C3FC0"
   ],
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerLambda/Resource",
    "aws:asset:path": "asset.74cf9fe7960b6da5308fcb43d86647d5b483cae5f67ec8b2697f4f82e9468f84",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "CleanerLambdaSqsEventSourceCopierCleanerStackCleanerEventQueueB34AA1679A9539FD": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "EventSourceArn": {
     "Fn::GetAtt": [
      "CleanerEventQueueE520A60A",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "CleanerLambdaADF65AF3"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CleanerLambda/SqsEventSource:CopierCleanerStackCleanerEventQueueB34AA167/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VPwW7CMAz9Fu7BG5TLjoC22yRGd0dumoHXNOnqZBWK8u9T0lKQdvF7z+/ZTtaw2rzA8wIHXsq6WWqqIJQOZSNw4FPgAsLOy0Y5sf8yExthh6yiYMMQPm1HMgVGkuvBapLXuTnJ0lcse+ocWZO8Rx0F/zCED6+8St5Icr0ve5BRELYQjlbneMZ78JbR2FY1QnjzRt6uzvz1VxlXWt9L9Y5dR+ac7P/dKLg4IbNyDNsEQmrr6wGdvEDYauzbNJhJjPk1ivMCMZM8Vzo8T1f21tQ0/vtwdRdrngpYrWGz+GaiZe+No1bBccQ/R/amrKgBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "CopierCleanerStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}